{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Warning (Apr 19th 2020) This is very much a work in progress! Many pages are still empty, that will hopefully change soon... Welcome to the official EasyBuild tutorial! \u00b6 Scope \u00b6 This is an introductory tutorial to EasyBuild , a command line tool for installing (scientific) software on High Performance Computing (HPC) systems. It aims to explain the core concepts of EasyBuild, get you started with using it, make you familiar with some of the features it provides, and show how it is used by large HPC sites to maintain their central software stacks. Through hands-on exercises and demos, you will learn how EasyBuild can help you to get scientific software installed in an efficient way. Intended audience \u00b6 This tutorial is primarily intended for people new to EasyBuild, but even if you're already familiar with the project it could be interesting to step through it. Our main target audience includes: HPC system administrators HPC user support team members scientific researchers using HPC systems Prerequisites \u00b6 We expect you to be (a little bit) familiar with: using a Linux command line interface the (absolute) basics of compiling software from source Required software: OS: GNU/Linux (any distribution) Python 2.7 or 3.5+ an environment modules tool (see the module command) we recommend Lmod , a modern environment modules tool implemented in Lua for more information on the environment modules tools supported by EasyBuild, see here Tutorial contents \u00b6 Introduction to EasyBuild Installation (*) Configuration (*) Basic usage (*) Installing software with EasyBuild (*) Troubleshooting (*) Beyond the basics (*) Hierarchical module naming schemes (*) Adding support for additional software (*) EasyBuild at J\u00fclich Supercomputing Centre EasyBuild at Compute Canada The EasyBuild Community Contributing to EasyBuild (*) Comparison with other tools Getting help (sections indicated with (*) involve hands-on exercises) Additional resources \u00b6 website: https://easybuilders.github.io/easybuild documentation: https://easybuild.readthedocs.io GitHub: https://github.com/easybuilders Slack: https://easybuild.slack.com (self-request an invite here ) mailing list: https://lists.ugent.be/wws/subscribe/easybuild","title":""},{"location":"#welcome-to-the-official-easybuild-tutorial","text":"","title":"Welcome to the official EasyBuild tutorial!"},{"location":"#scope","text":"This is an introductory tutorial to EasyBuild , a command line tool for installing (scientific) software on High Performance Computing (HPC) systems. It aims to explain the core concepts of EasyBuild, get you started with using it, make you familiar with some of the features it provides, and show how it is used by large HPC sites to maintain their central software stacks. Through hands-on exercises and demos, you will learn how EasyBuild can help you to get scientific software installed in an efficient way.","title":"Scope"},{"location":"#intended-audience","text":"This tutorial is primarily intended for people new to EasyBuild, but even if you're already familiar with the project it could be interesting to step through it. Our main target audience includes: HPC system administrators HPC user support team members scientific researchers using HPC systems","title":"Intended audience"},{"location":"#prerequisites","text":"We expect you to be (a little bit) familiar with: using a Linux command line interface the (absolute) basics of compiling software from source Required software: OS: GNU/Linux (any distribution) Python 2.7 or 3.5+ an environment modules tool (see the module command) we recommend Lmod , a modern environment modules tool implemented in Lua for more information on the environment modules tools supported by EasyBuild, see here","title":"Prerequisites"},{"location":"#tutorial-contents","text":"Introduction to EasyBuild Installation (*) Configuration (*) Basic usage (*) Installing software with EasyBuild (*) Troubleshooting (*) Beyond the basics (*) Hierarchical module naming schemes (*) Adding support for additional software (*) EasyBuild at J\u00fclich Supercomputing Centre EasyBuild at Compute Canada The EasyBuild Community Contributing to EasyBuild (*) Comparison with other tools Getting help (sections indicated with (*) involve hands-on exercises)","title":"Tutorial contents"},{"location":"#additional-resources","text":"website: https://easybuilders.github.io/easybuild documentation: https://easybuild.readthedocs.io GitHub: https://github.com/easybuilders Slack: https://easybuild.slack.com (self-request an invite here ) mailing list: https://lists.ugent.be/wws/subscribe/easybuild","title":"Additional resources"},{"location":"01_introduction/","text":"What is EasyBuild? \u00b6 EasyBuild is a software build and installation framework that manages (scientific) software in an efficient way, without compromises on performance. Easybuild is especially tailored towards High Performance Computing (HPC) environments. Elevator pitch \u00b6 EasyBuild intends to relieve HPC support teams from manually managing software installations while at the same time providing a consistent and well performing scientific software stack to end users of HPC systems. It serves as a uniform interface for installing scientific software and saves valuable time (and frustration) by the automation of tedious, boring and repetitive tasks. In addition, EasyBuild can empower scientific researchers to self-manage their software stack , and it can serve as a tool that can be leveraged for building optimized container images . The project has grown out to be a platform for collaboration with HPC sites worldwide. Key features \u00b6 EasyBuild is capable of fully autonomously installing (scientific) software , including making sure that all necessary dependencies are installed, and automatically generating environment module files. No admin privileges are required : it is sufficient to have write permissions to the preferred software installation prefix. It is highly configurable via configuration files, environment variables, and command line options. The functionality can be dynamically extended via plugins, and hooks are available for further site-specific customizations if required. The installation procedure executed by EasyBuild is thoroughly logged and fully transparent via dry run and tracing . EasyBuild supports using a custom module naming scheme , allows for hierarchical module naming schemes, and integrates with various other tools ranging from resource managers (Slurm and GC3Pie ), container tools ( Singularity and Docker ), packaging tools ( FPM ), and so on. The project is actively developed by a worldwide community, with stable versions being released every 6-8 weeks since 2012. Comprehensive testing practices are applied throughout the development cycle, with extensive suites of unit and integration tests being run in a CI environment, consistent testing of incoming contributions, and thorough regression testing before every release. What EasyBuild is not ** \u00b6 EasyBuild is not YABT (Yet Another Build Tool) : it does not replace established build tools like CMake or make , it wraps around them. If the installation procedure of a software package involves running some unholy trinity of tools while whispering the correct magic incantations, EasyBuild automates this process for you. It is not a replacement for traditional Linux package manangers like yum , dnf or apt . EasyBuild relies on certain tools and libraries provided by the operating system. This includes glibc, OpenSSL, Infiniband, GPU drivers, and so on. It is required that these tools are installed and managed by other means. This is typically done via the package management tool that comes with your Linux distribution. Finally, EasyBuild is *not a magic solution to all your (software installation) problems . You may, and probably will still occasionally, run into compiler errors unless somebody has already taken care of the problem for you. Implementation \u00b6 EasyBuild is implemented in Python , and fully supports both Python 2.7 and 3.5+. Releases are published via PyPI , under the GPLv2 open source license . Development is done through the easybuilders organisation on GitHub , where each of the EasyBuild components is hosted in a separate repository. Terminology \u00b6 Over the years, we have come up with some terminology specific to EasyBuild to refer to particular components, which we use alongside established terminology relevant to the context of building and installing software. It is important to be familiar with these terms. Framework \u00b6 The EasyBuild framework consists of a set of Python modules organised in packages ( easybuild.framework , easybuild.tools , etc.) that collectively form the heart of EasyBuild . It implements the common functionality that you need when building software from source , providing functions for unpacking source files, applying patch files, collecting the output produced by shell commands that are being run and checking their exit code, generating environment module files, etc. The EasyBuild framework does not implement any specific installation procedure, it only provides the necessary functionality to facilitate this (see easyblocks ). Easyblocks \u00b6 An easyblock is a Python module that implements a specific software installation procedure . It can be viewed as a plugin to the EasyBuild framework. Easyblocks can be either generic or software-specific . A generic easyblock implements an installation procedure that can be used for multiple different software packages. Commonly used examples include the ConfigureMake easyblock which implements the ubiquitous configure - make - make install procedure, and the PythonPackage easyblock that can be used to install a Python package. A software-specific easyblock implements an installation procedure that is specific to a particular software packages. Infamous examples include the easyblocks we have for GCC , OpenFOAM , TensorFlow , ... The installation procedure performed by an easyblock can be controlled by defining so-called easyconfig parameters (see easyconfig files ). Easyconfig files \u00b6 Easyconfig files (or easyconfigs for short), are simple text files (written in Python syntax) that specify what EasyBuild should install . They define the different easyconfig parameters that collectively form a complete specification for a particular software installation. Some easyconfig parameters are mandatory , these must be defined in each easyconfig file: name and version , which specify the name and version of the software to install (surprise!); homepage and description , which provide key metadata for the software; toolchain , which specifies the compiler toolchain to use to install the software (see toolchains tab); Other easyconfig parameters are optional: they can be used to provide required information, or to control specific aspects of the installation procedure performed by the easyblock . Some commonly used optional easyconfig parameters include: easyblock , which specifies which (generic) easyblock should be used; sources and source_urls , which specify the list of source files and where to download them; dependencies and builddependencies , which specify (drum roll...) the list of (build) dependencies; configopts , buildopts , and installopts , which speficy options for the configuration/build/install commands, resp.; Extensions \u00b6 Extensions is the collective term we use for additional software packages that can be installed on top of another software package . Examples are Python packages , R libraries and Perl modules (can you tell why we had to come up with a different term?). Extensions can be installed in different ways: stand-alone, as a separate installation on top of one or more other installations; as a part of a bundle of extensions that collectively form a separate installation; or as, well, an extension to a specific installation to yield a \"batteries included\" type of installation (for examples by adding a bunch of Python packages from PyPI into a Python installation); Dependencies \u00b6 A dependency is a common term in the context of software, which we probably don't need to define at length, but here it goes anyway: it refers to a software package that is either strictly required by other software, or that can be leveraged to enhance other software (to support specific features for example). There are multiple types of dependencies: a build dependency is only required when building/installing a software package; once the software package is installed, it is no longer needed to use that software; a runtime dependency (or just dependency for short) is a software package that is required to use (or run ) another software package; a link-time dependency is somewhere in between a build and runtime dependency: it is only needed when linking a software package; it can become either a build or runtime dependency, depending (hah!) on how the software is installed exactly; The distinction between link-time and build/runtime dependencies is mostly irrelevant for this tutorial though. Toolchains \u00b6 A compiler toolchain (or just toolchain for short) is a set of compilers , which are used to build software from source, and additional libraries which provide specific functionality. We refer to the different parts of a toolchain as toolchain components . The compiler component typically consists of C , C++ and Fortran compilers in the context of HPC, but additional compilers (for example, a CUDA compiler for GPGPU software) can also be included. Additional toolchain components typically are special-purpose libraries: an MPI library to support distributed computations (for example, Open MPI ); libraries providing efficient linear algebra routines ( BLAS , LAPACK ); a library supporting computing Fast Fourier Tranforms (for example, FFTW ); A toolchain that includes all of these libraries is referred to as a full toolchain , while a subtoolchain is a toolchain that is missing one or more of these libraries. A compiler-only toolchain only consists of compilers (no additional libraries). Modules \u00b6 Module is a massively overloaded term in (scientific) software and IT in general (kernel modules, Python modules, etc.). In the context of EasyBuild, the term 'module' usually refers to an environment module (file) . Environment modules is a well established concept on HPC systems: it is a way to specify changes that should be made to one or more environment variables in a shell -agnostic way. A module file is usually written in either Tcl or Lua syntax, and specifies for which environment variables the value should be updated, and how (append, prepend, (re)define, undefine, etc.). Environment module files are processed via a modules tool , of which there are several conceptually similar yet slighty different implementations. The Tcl-based Environment Modules implementation, and Lmod , a more recent Lua-based implementation (which also supports module files written in Tcl syntax), are the most commonly used ones. EasyBuild heavily relies on environment modules, and hence having a modules tool installed is a strict requirement in order to use EasyBuild . Both Lmod and the Tcl-based Environment Modules tools are supported by EasyBuild, as well as module files in both Tcl and Lua syntax. Module files are automatically generated for each software installation by EasyBuild, and loading a module results in changes being made to the environment of the current shell session such that the corresponding software installation can be used. Bringing it all together \u00b6 The EasyBuild framework leverages easyblocks to automatically build and install (scientific) software, potentially including additional extensions , using a particular compiler toolchain , as specified in easyconfig files . EasyBuild ensures that the specified dependencies are installed, and automatically generates a set of (environment) modules that facilitate access to the installed software. Focus points \u00b6 EasyBuild was created specifically for installing scientific software on HPC systems , which is reflected in some of the design choices that were made. Performance \u00b6 We strongly prefer building software from source , whenever possible. This is important to ensure that the binaries that are installed can maximally exploit the capabilities of processors on which the software will be used. For that same reason, EasyBuild optimizes software for the processor architecture of the build host by default, via compiler options like -march=native (GCC), -xHost (Intel compilers), etc. This behaviour can be changed via the --optarch configuration setting , if desired. Reproducibility \u00b6 In addition to performance, reproducibility of installations is another major focus point. Most software installations done with EasyBuild use a particular toolchain , with which we aim to take control over the build environment and avoid relying on tools & libraries provided by the OS. For similar reasons, we try to provide all required dependencies through EasyBuild as well, with a few notable exceptions (like OpenSSL for security reasons, and Infiniband and GPU drivers which are too closely intertwined with the OS). For both toolchains and dependencies, fixed software versions are specified in the easyconfig files . That way, easyconfig files can easily be shared with others: if they worked for you it is very likely that they will work for others too, because the vast majority of the software stack is controlled by EasyBuild. Community effort \u00b6 In a number of different ways, we try to encourage EasyBuild users to collaborate and help each other out. We actively recommend people to report problems & bugs, to submit ideas for additional features and improvements, and to contribute back when they can, be it by opening pull requests to the EasyBuild framework , easyblocks , easyconfigs repositories, or to the EasyBuild documentation . Through the foss and intel common toolchains , we try to focus the efforts of the EasyBuild community a bit to specific toolchains, which increases the usefulness of the easyconfig files we collect in the central repository . Last but not least, EasyBuild provides various GitHub integration features that greatly facilitate the contribution process: opening new pull requests & updating existing, testing pull requests, reviewing incoming contributions, ... can all be done straight from the EasyBuild command line. This not only saves time, effort, brain cycles and mouse clicks for contributors, it also makes the review process for maintainers significantly easier, and it leads to better stability & consistency. The EasyBuild community \u00b6 EasyBuild was originally created by the HPC team at Ghent University (Belgium) in 2009, and was developed in-house before it was publicly released in 2012. Since then it has grown out to a community project , which is used and developed by various HPC centres & consortia worldwide, including (but not limited to): Flemish Supercomputer Centre (VSC), Belgium Consortium des \u00c9quipements de Calcul Intensif (C\u00c9CI), Belgium J\u00fclich Supercomputing Centre (JSC), Germany Swiss National Supercomputing Centre (CSCS) Birmingham Environment for Academic Research (BEAR), UK SURFsara, Netherlands Swedish National Infrastructure for Computing (SNIC) Compute Canada Fred Hutchinson Cancer Research Center, US Texas A&M University (TAMU) High Performance Research Computing (HPRC), US National University of Singapore (NUS) University of Melbourne, Australia HPCNow! Today, an experienced team of HPC experts actively maintains the project, by implementing additional features and bug fixes, and processing incoming contributions. The EasyBuild documentation is available at https://easybuild.readthedocs.io . You can interact with the EasyBuild community via the Slack channel (request an invitation here ), or subscribe to the mailing list .","title":"1. Introduction to EasyBuild"},{"location":"01_introduction/#what-is-easybuild","text":"EasyBuild is a software build and installation framework that manages (scientific) software in an efficient way, without compromises on performance. Easybuild is especially tailored towards High Performance Computing (HPC) environments.","title":"What is EasyBuild?"},{"location":"01_introduction/#elevator-pitch","text":"EasyBuild intends to relieve HPC support teams from manually managing software installations while at the same time providing a consistent and well performing scientific software stack to end users of HPC systems. It serves as a uniform interface for installing scientific software and saves valuable time (and frustration) by the automation of tedious, boring and repetitive tasks. In addition, EasyBuild can empower scientific researchers to self-manage their software stack , and it can serve as a tool that can be leveraged for building optimized container images . The project has grown out to be a platform for collaboration with HPC sites worldwide.","title":"Elevator pitch"},{"location":"01_introduction/#key-features","text":"EasyBuild is capable of fully autonomously installing (scientific) software , including making sure that all necessary dependencies are installed, and automatically generating environment module files. No admin privileges are required : it is sufficient to have write permissions to the preferred software installation prefix. It is highly configurable via configuration files, environment variables, and command line options. The functionality can be dynamically extended via plugins, and hooks are available for further site-specific customizations if required. The installation procedure executed by EasyBuild is thoroughly logged and fully transparent via dry run and tracing . EasyBuild supports using a custom module naming scheme , allows for hierarchical module naming schemes, and integrates with various other tools ranging from resource managers (Slurm and GC3Pie ), container tools ( Singularity and Docker ), packaging tools ( FPM ), and so on. The project is actively developed by a worldwide community, with stable versions being released every 6-8 weeks since 2012. Comprehensive testing practices are applied throughout the development cycle, with extensive suites of unit and integration tests being run in a CI environment, consistent testing of incoming contributions, and thorough regression testing before every release.","title":"Key features"},{"location":"01_introduction/#what-easybuild-is-not","text":"EasyBuild is not YABT (Yet Another Build Tool) : it does not replace established build tools like CMake or make , it wraps around them. If the installation procedure of a software package involves running some unholy trinity of tools while whispering the correct magic incantations, EasyBuild automates this process for you. It is not a replacement for traditional Linux package manangers like yum , dnf or apt . EasyBuild relies on certain tools and libraries provided by the operating system. This includes glibc, OpenSSL, Infiniband, GPU drivers, and so on. It is required that these tools are installed and managed by other means. This is typically done via the package management tool that comes with your Linux distribution. Finally, EasyBuild is *not a magic solution to all your (software installation) problems . You may, and probably will still occasionally, run into compiler errors unless somebody has already taken care of the problem for you.","title":"What EasyBuild is not**"},{"location":"01_introduction/#implementation","text":"EasyBuild is implemented in Python , and fully supports both Python 2.7 and 3.5+. Releases are published via PyPI , under the GPLv2 open source license . Development is done through the easybuilders organisation on GitHub , where each of the EasyBuild components is hosted in a separate repository.","title":"Implementation"},{"location":"01_introduction/#terminology","text":"Over the years, we have come up with some terminology specific to EasyBuild to refer to particular components, which we use alongside established terminology relevant to the context of building and installing software. It is important to be familiar with these terms.","title":"Terminology"},{"location":"01_introduction/#framework","text":"The EasyBuild framework consists of a set of Python modules organised in packages ( easybuild.framework , easybuild.tools , etc.) that collectively form the heart of EasyBuild . It implements the common functionality that you need when building software from source , providing functions for unpacking source files, applying patch files, collecting the output produced by shell commands that are being run and checking their exit code, generating environment module files, etc. The EasyBuild framework does not implement any specific installation procedure, it only provides the necessary functionality to facilitate this (see easyblocks ).","title":"Framework"},{"location":"01_introduction/#easyblocks","text":"An easyblock is a Python module that implements a specific software installation procedure . It can be viewed as a plugin to the EasyBuild framework. Easyblocks can be either generic or software-specific . A generic easyblock implements an installation procedure that can be used for multiple different software packages. Commonly used examples include the ConfigureMake easyblock which implements the ubiquitous configure - make - make install procedure, and the PythonPackage easyblock that can be used to install a Python package. A software-specific easyblock implements an installation procedure that is specific to a particular software packages. Infamous examples include the easyblocks we have for GCC , OpenFOAM , TensorFlow , ... The installation procedure performed by an easyblock can be controlled by defining so-called easyconfig parameters (see easyconfig files ).","title":"Easyblocks"},{"location":"01_introduction/#easyconfig-files","text":"Easyconfig files (or easyconfigs for short), are simple text files (written in Python syntax) that specify what EasyBuild should install . They define the different easyconfig parameters that collectively form a complete specification for a particular software installation. Some easyconfig parameters are mandatory , these must be defined in each easyconfig file: name and version , which specify the name and version of the software to install (surprise!); homepage and description , which provide key metadata for the software; toolchain , which specifies the compiler toolchain to use to install the software (see toolchains tab); Other easyconfig parameters are optional: they can be used to provide required information, or to control specific aspects of the installation procedure performed by the easyblock . Some commonly used optional easyconfig parameters include: easyblock , which specifies which (generic) easyblock should be used; sources and source_urls , which specify the list of source files and where to download them; dependencies and builddependencies , which specify (drum roll...) the list of (build) dependencies; configopts , buildopts , and installopts , which speficy options for the configuration/build/install commands, resp.;","title":"Easyconfig files"},{"location":"01_introduction/#extensions","text":"Extensions is the collective term we use for additional software packages that can be installed on top of another software package . Examples are Python packages , R libraries and Perl modules (can you tell why we had to come up with a different term?). Extensions can be installed in different ways: stand-alone, as a separate installation on top of one or more other installations; as a part of a bundle of extensions that collectively form a separate installation; or as, well, an extension to a specific installation to yield a \"batteries included\" type of installation (for examples by adding a bunch of Python packages from PyPI into a Python installation);","title":"Extensions"},{"location":"01_introduction/#dependencies","text":"A dependency is a common term in the context of software, which we probably don't need to define at length, but here it goes anyway: it refers to a software package that is either strictly required by other software, or that can be leveraged to enhance other software (to support specific features for example). There are multiple types of dependencies: a build dependency is only required when building/installing a software package; once the software package is installed, it is no longer needed to use that software; a runtime dependency (or just dependency for short) is a software package that is required to use (or run ) another software package; a link-time dependency is somewhere in between a build and runtime dependency: it is only needed when linking a software package; it can become either a build or runtime dependency, depending (hah!) on how the software is installed exactly; The distinction between link-time and build/runtime dependencies is mostly irrelevant for this tutorial though.","title":"Dependencies"},{"location":"01_introduction/#toolchains","text":"A compiler toolchain (or just toolchain for short) is a set of compilers , which are used to build software from source, and additional libraries which provide specific functionality. We refer to the different parts of a toolchain as toolchain components . The compiler component typically consists of C , C++ and Fortran compilers in the context of HPC, but additional compilers (for example, a CUDA compiler for GPGPU software) can also be included. Additional toolchain components typically are special-purpose libraries: an MPI library to support distributed computations (for example, Open MPI ); libraries providing efficient linear algebra routines ( BLAS , LAPACK ); a library supporting computing Fast Fourier Tranforms (for example, FFTW ); A toolchain that includes all of these libraries is referred to as a full toolchain , while a subtoolchain is a toolchain that is missing one or more of these libraries. A compiler-only toolchain only consists of compilers (no additional libraries).","title":"Toolchains"},{"location":"01_introduction/#modules","text":"Module is a massively overloaded term in (scientific) software and IT in general (kernel modules, Python modules, etc.). In the context of EasyBuild, the term 'module' usually refers to an environment module (file) . Environment modules is a well established concept on HPC systems: it is a way to specify changes that should be made to one or more environment variables in a shell -agnostic way. A module file is usually written in either Tcl or Lua syntax, and specifies for which environment variables the value should be updated, and how (append, prepend, (re)define, undefine, etc.). Environment module files are processed via a modules tool , of which there are several conceptually similar yet slighty different implementations. The Tcl-based Environment Modules implementation, and Lmod , a more recent Lua-based implementation (which also supports module files written in Tcl syntax), are the most commonly used ones. EasyBuild heavily relies on environment modules, and hence having a modules tool installed is a strict requirement in order to use EasyBuild . Both Lmod and the Tcl-based Environment Modules tools are supported by EasyBuild, as well as module files in both Tcl and Lua syntax. Module files are automatically generated for each software installation by EasyBuild, and loading a module results in changes being made to the environment of the current shell session such that the corresponding software installation can be used.","title":"Modules"},{"location":"01_introduction/#bringing-it-all-together","text":"The EasyBuild framework leverages easyblocks to automatically build and install (scientific) software, potentially including additional extensions , using a particular compiler toolchain , as specified in easyconfig files . EasyBuild ensures that the specified dependencies are installed, and automatically generates a set of (environment) modules that facilitate access to the installed software.","title":"Bringing it all together"},{"location":"01_introduction/#focus-points","text":"EasyBuild was created specifically for installing scientific software on HPC systems , which is reflected in some of the design choices that were made.","title":"Focus points"},{"location":"01_introduction/#performance","text":"We strongly prefer building software from source , whenever possible. This is important to ensure that the binaries that are installed can maximally exploit the capabilities of processors on which the software will be used. For that same reason, EasyBuild optimizes software for the processor architecture of the build host by default, via compiler options like -march=native (GCC), -xHost (Intel compilers), etc. This behaviour can be changed via the --optarch configuration setting , if desired.","title":"Performance"},{"location":"01_introduction/#reproducibility","text":"In addition to performance, reproducibility of installations is another major focus point. Most software installations done with EasyBuild use a particular toolchain , with which we aim to take control over the build environment and avoid relying on tools & libraries provided by the OS. For similar reasons, we try to provide all required dependencies through EasyBuild as well, with a few notable exceptions (like OpenSSL for security reasons, and Infiniband and GPU drivers which are too closely intertwined with the OS). For both toolchains and dependencies, fixed software versions are specified in the easyconfig files . That way, easyconfig files can easily be shared with others: if they worked for you it is very likely that they will work for others too, because the vast majority of the software stack is controlled by EasyBuild.","title":"Reproducibility"},{"location":"01_introduction/#community-effort","text":"In a number of different ways, we try to encourage EasyBuild users to collaborate and help each other out. We actively recommend people to report problems & bugs, to submit ideas for additional features and improvements, and to contribute back when they can, be it by opening pull requests to the EasyBuild framework , easyblocks , easyconfigs repositories, or to the EasyBuild documentation . Through the foss and intel common toolchains , we try to focus the efforts of the EasyBuild community a bit to specific toolchains, which increases the usefulness of the easyconfig files we collect in the central repository . Last but not least, EasyBuild provides various GitHub integration features that greatly facilitate the contribution process: opening new pull requests & updating existing, testing pull requests, reviewing incoming contributions, ... can all be done straight from the EasyBuild command line. This not only saves time, effort, brain cycles and mouse clicks for contributors, it also makes the review process for maintainers significantly easier, and it leads to better stability & consistency.","title":"Community effort"},{"location":"01_introduction/#the-easybuild-community","text":"EasyBuild was originally created by the HPC team at Ghent University (Belgium) in 2009, and was developed in-house before it was publicly released in 2012. Since then it has grown out to a community project , which is used and developed by various HPC centres & consortia worldwide, including (but not limited to): Flemish Supercomputer Centre (VSC), Belgium Consortium des \u00c9quipements de Calcul Intensif (C\u00c9CI), Belgium J\u00fclich Supercomputing Centre (JSC), Germany Swiss National Supercomputing Centre (CSCS) Birmingham Environment for Academic Research (BEAR), UK SURFsara, Netherlands Swedish National Infrastructure for Computing (SNIC) Compute Canada Fred Hutchinson Cancer Research Center, US Texas A&M University (TAMU) High Performance Research Computing (HPRC), US National University of Singapore (NUS) University of Melbourne, Australia HPCNow! Today, an experienced team of HPC experts actively maintains the project, by implementing additional features and bug fixes, and processing incoming contributions. The EasyBuild documentation is available at https://easybuild.readthedocs.io . You can interact with the EasyBuild community via the Slack channel (request an invitation here ), or subscribe to the mailing list .","title":"The EasyBuild community"},{"location":"02_installation/","text":"","title":"2. Installation"},{"location":"03_configuration/","text":"","title":"3. Configuration"},{"location":"04_basic_usage/","text":"","title":"4. Basic usage"},{"location":"05_installing_software/","text":"","title":"5. Installing software with EasyBuild"},{"location":"06_troubleshooting/","text":"","title":"6. Troubleshooting"},{"location":"07_beyond_the_basics/","text":"","title":"7. Beyond the basics"},{"location":"08_hmns/","text":"","title":"8. Hierarchical module naming schemes"},{"location":"09_adding_support_software/","text":"1 2 3 4 name = 'example' version = '1.2.3' toolchain = { 'name' : 'foss' , 'version' : '2019b' } graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2]","title":"9. Adding support for additional software"},{"location":"10_jsc/","text":"","title":"10. EasyBuild at J\u00fclich Supercomputing Centre"},{"location":"11_computecanada/","text":"","title":"11. EasyBuild at Compute Canada"},{"location":"12_community/","text":"","title":"12. The EasyBuild Community"},{"location":"13_contributing/","text":"","title":"13. Contributing to EasyBuild"},{"location":"14_comparison_other_tools/","text":"","title":"14. Comparison with other tools"},{"location":"15_getting_help/","text":"","title":"15. Getting help"}]}